// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: protos/fleet_manager/v1/fleet_manager.proto

package fleet_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FleetManager_Telemetry_FullMethodName         = "/v1.fleet_manager.FleetManager/Telemetry"
	FleetManager_RobotsList_FullMethodName        = "/v1.fleet_manager.FleetManager/RobotsList"
	FleetManager_Plans_FullMethodName             = "/v1.fleet_manager.FleetManager/Plans"
	FleetManager_HerdServices_FullMethodName      = "/v1.fleet_manager.FleetManager/HerdServices"
	FleetManager_GetConfigurations_FullMethodName = "/v1.fleet_manager.FleetManager/GetConfigurations"
	FleetManager_DockerTelemetry_FullMethodName   = "/v1.fleet_manager.FleetManager/DockerTelemetry"
)

// FleetManagerClient is the client API for FleetManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetManagerClient interface {
	Telemetry(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RobotStatesRequest, RobotStatesResponse], error)
	RobotsList(ctx context.Context, in *RobotsListRequest, opts ...grpc.CallOption) (*RobotsListResponse, error)
	Plans(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanResponse, error)
	HerdServices(ctx context.Context, in *HerdServiceRequest, opts ...grpc.CallOption) (*HerdServiceResponse, error)
	GetConfigurations(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetConfigResponse, GetConfigRequest], error)
	DockerTelemetry(ctx context.Context, in *DockerTelemetryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DockerTelemetryResponse], error)
}

type fleetManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetManagerClient(cc grpc.ClientConnInterface) FleetManagerClient {
	return &fleetManagerClient{cc}
}

func (c *fleetManagerClient) Telemetry(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RobotStatesRequest, RobotStatesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FleetManager_ServiceDesc.Streams[0], FleetManager_Telemetry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RobotStatesRequest, RobotStatesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_TelemetryClient = grpc.ClientStreamingClient[RobotStatesRequest, RobotStatesResponse]

func (c *fleetManagerClient) RobotsList(ctx context.Context, in *RobotsListRequest, opts ...grpc.CallOption) (*RobotsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RobotsListResponse)
	err := c.cc.Invoke(ctx, FleetManager_RobotsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetManagerClient) Plans(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlanResponse)
	err := c.cc.Invoke(ctx, FleetManager_Plans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetManagerClient) HerdServices(ctx context.Context, in *HerdServiceRequest, opts ...grpc.CallOption) (*HerdServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HerdServiceResponse)
	err := c.cc.Invoke(ctx, FleetManager_HerdServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetManagerClient) GetConfigurations(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetConfigResponse, GetConfigRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FleetManager_ServiceDesc.Streams[1], FleetManager_GetConfigurations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetConfigResponse, GetConfigRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_GetConfigurationsClient = grpc.BidiStreamingClient[GetConfigResponse, GetConfigRequest]

func (c *fleetManagerClient) DockerTelemetry(ctx context.Context, in *DockerTelemetryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DockerTelemetryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FleetManager_ServiceDesc.Streams[2], FleetManager_DockerTelemetry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DockerTelemetryRequest, DockerTelemetryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_DockerTelemetryClient = grpc.ServerStreamingClient[DockerTelemetryResponse]

// FleetManagerServer is the server API for FleetManager service.
// All implementations must embed UnimplementedFleetManagerServer
// for forward compatibility.
type FleetManagerServer interface {
	Telemetry(grpc.ClientStreamingServer[RobotStatesRequest, RobotStatesResponse]) error
	RobotsList(context.Context, *RobotsListRequest) (*RobotsListResponse, error)
	Plans(context.Context, *PlanRequest) (*PlanResponse, error)
	HerdServices(context.Context, *HerdServiceRequest) (*HerdServiceResponse, error)
	GetConfigurations(grpc.BidiStreamingServer[GetConfigResponse, GetConfigRequest]) error
	DockerTelemetry(*DockerTelemetryRequest, grpc.ServerStreamingServer[DockerTelemetryResponse]) error
	mustEmbedUnimplementedFleetManagerServer()
}

// UnimplementedFleetManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFleetManagerServer struct{}

func (UnimplementedFleetManagerServer) Telemetry(grpc.ClientStreamingServer[RobotStatesRequest, RobotStatesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Telemetry not implemented")
}
func (UnimplementedFleetManagerServer) RobotsList(context.Context, *RobotsListRequest) (*RobotsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RobotsList not implemented")
}
func (UnimplementedFleetManagerServer) Plans(context.Context, *PlanRequest) (*PlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Plans not implemented")
}
func (UnimplementedFleetManagerServer) HerdServices(context.Context, *HerdServiceRequest) (*HerdServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HerdServices not implemented")
}
func (UnimplementedFleetManagerServer) GetConfigurations(grpc.BidiStreamingServer[GetConfigResponse, GetConfigRequest]) error {
	return status.Errorf(codes.Unimplemented, "method GetConfigurations not implemented")
}
func (UnimplementedFleetManagerServer) DockerTelemetry(*DockerTelemetryRequest, grpc.ServerStreamingServer[DockerTelemetryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DockerTelemetry not implemented")
}
func (UnimplementedFleetManagerServer) mustEmbedUnimplementedFleetManagerServer() {}
func (UnimplementedFleetManagerServer) testEmbeddedByValue()                      {}

// UnsafeFleetManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetManagerServer will
// result in compilation errors.
type UnsafeFleetManagerServer interface {
	mustEmbedUnimplementedFleetManagerServer()
}

func RegisterFleetManagerServer(s grpc.ServiceRegistrar, srv FleetManagerServer) {
	// If the following call pancis, it indicates UnimplementedFleetManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FleetManager_ServiceDesc, srv)
}

func _FleetManager_Telemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FleetManagerServer).Telemetry(&grpc.GenericServerStream[RobotStatesRequest, RobotStatesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_TelemetryServer = grpc.ClientStreamingServer[RobotStatesRequest, RobotStatesResponse]

func _FleetManager_RobotsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetManagerServer).RobotsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetManager_RobotsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetManagerServer).RobotsList(ctx, req.(*RobotsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetManager_Plans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetManagerServer).Plans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetManager_Plans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetManagerServer).Plans(ctx, req.(*PlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetManager_HerdServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HerdServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetManagerServer).HerdServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetManager_HerdServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetManagerServer).HerdServices(ctx, req.(*HerdServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetManager_GetConfigurations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FleetManagerServer).GetConfigurations(&grpc.GenericServerStream[GetConfigResponse, GetConfigRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_GetConfigurationsServer = grpc.BidiStreamingServer[GetConfigResponse, GetConfigRequest]

func _FleetManager_DockerTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DockerTelemetryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FleetManagerServer).DockerTelemetry(m, &grpc.GenericServerStream[DockerTelemetryRequest, DockerTelemetryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_DockerTelemetryServer = grpc.ServerStreamingServer[DockerTelemetryResponse]

// FleetManager_ServiceDesc is the grpc.ServiceDesc for FleetManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FleetManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.fleet_manager.FleetManager",
	HandlerType: (*FleetManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RobotsList",
			Handler:    _FleetManager_RobotsList_Handler,
		},
		{
			MethodName: "Plans",
			Handler:    _FleetManager_Plans_Handler,
		},
		{
			MethodName: "HerdServices",
			Handler:    _FleetManager_HerdServices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Telemetry",
			Handler:       _FleetManager_Telemetry_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetConfigurations",
			Handler:       _FleetManager_GetConfigurations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DockerTelemetry",
			Handler:       _FleetManager_DockerTelemetry_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/fleet_manager/v1/fleet_manager.proto",
}
