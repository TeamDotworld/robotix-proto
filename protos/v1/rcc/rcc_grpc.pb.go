// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: protos/rcc/v1/rcc.proto

package rcc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	model "protos/v1/model"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Agent_AuthenticateAgent_FullMethodName            = "/v1.rcc.Agent/AuthenticateAgent"
	Agent_GetDeviceSpecifications_FullMethodName      = "/v1.rcc.Agent/GetDeviceSpecifications"
	Agent_GetAgentConfiguration_FullMethodName        = "/v1.rcc.Agent/GetAgentConfiguration"
	Agent_Health_FullMethodName                       = "/v1.rcc.Agent/Health"
	Agent_GetCommandRequestStream_FullMethodName      = "/v1.rcc.Agent/GetCommandRequestStream"
	Agent_SendCommandResponse_FullMethodName          = "/v1.rcc.Agent/SendCommandResponse"
	Agent_GetSubscriptionRequestStream_FullMethodName = "/v1.rcc.Agent/GetSubscriptionRequestStream"
	Agent_SendSubscriptionResponse_FullMethodName     = "/v1.rcc.Agent/SendSubscriptionResponse"
	Agent_SendCommandResponseStream_FullMethodName    = "/v1.rcc.Agent/SendCommandResponseStream"
	Agent_PostData_FullMethodName                     = "/v1.rcc.Agent/PostData"
	Agent_PostMultiData_FullMethodName                = "/v1.rcc.Agent/PostMultiData"
	Agent_StreamData_FullMethodName                   = "/v1.rcc.Agent/StreamData"
	Agent_ReceiveRosMessages_FullMethodName           = "/v1.rcc.Agent/ReceiveRosMessages"
	Agent_GetRtcSignal_FullMethodName                 = "/v1.rcc.Agent/GetRtcSignal"
	Agent_SendSignalData_FullMethodName               = "/v1.rcc.Agent/SendSignalData"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	// AuthenticateAgent service authenticates the agent and return a boolean
	// status which determines the authentication status of the agent
	AuthenticateAgent(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// GetDeviceSpecifications returns the device specification details.
	GetDeviceSpecifications(ctx context.Context, in *SpecsRequest, opts ...grpc.CallOption) (*SpecsResponse, error)
	// GetAgentConfiguration returns the Agent configuration.
	GetAgentConfiguration(ctx context.Context, in *GetAgentConfigurationRequest, opts ...grpc.CallOption) (*GetAgentConfigurationResponse, error)
	// Heath service is established between agent and server.When the connection
	// establises the status for the deivce changes
	// to ONLINE. This constantly checks for connection. If the connection is
	// disconnected the device status changes to OFFLINE.
	Health(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HealthResponse, HealthRequest], error)
	// GetCommandRequestStream service receives command from the server both
	// "SERVICE" and "ACTION" commands. The Command should be configured in the
	// agent's config first. Unconfigured command is not accepted
	GetCommandRequestStream(ctx context.Context, in *GetCommandRequestStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetCommandRequestStreamResponse], error)
	// SendCommandResponse service sends command response (Just response if it is
	// service call, if Action call it sends both result and feedback ) for a
	// particular command to the server.
	SendCommandResponse(ctx context.Context, in *SendCommandResponseRequest, opts ...grpc.CallOption) (*SendCommandResponseResponse, error)
	// GetSubscriptionRequestStream service recieves subscription related commands
	// such as "SUBSCRIBE", "UNSUBSCRIBE", "GET_TOPICS", "GET_SUBSCRIBED_TOPICS" and
	// sends back the response to the server. This is previously implemented for
	// node sdk with grpc, and not work with current implementation.
	GetSubscriptionRequestStream(ctx context.Context, in *GetSubscriptionRequestStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSubscriptionRequestStreamResponse], error)
	// SendSubscriptionResponse sends subscribed topic messages back to Rcc server
	SendSubscriptionResponse(ctx context.Context, in *SendSubscriptionResponseRequest, opts ...grpc.CallOption) (*SendSubscriptionResponseResponse, error)
	// (DEPRECATED) SendCommandResponseStream sends command response from agent to
	// rcc. It is deprecated using SendCommandResponse service instead.
	SendCommandResponseStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendCommandResponseRequest, SendCommandResponseResponse], error)
	// PostData service sends single datapoints from agent to rcc. These
	// points include ros messages or system stats which is then sent to influx at
	// the server.
	PostData(ctx context.Context, in *model.Datapoint, opts ...grpc.CallOption) (*PostDataResponse, error)
	// PostMultiData service sends multiple datapoints from agent to rcc. These
	// points include ros messages or system stats which is then sent to influx at
	// the server.
	PostMultiData(ctx context.Context, in *PostMultiDataRequest, opts ...grpc.CallOption) (*PostMultiDataResponse, error)
	// StreamData sends telemetry datapoints from rosnode to agent. This is used
	// for receiving telop data such as pose, realsense camera feed etc. from ros
	// node to agent and then agent sends the data to the client using webrtc
	// datachannel
	StreamData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[model.Datapoint, StreamDataResponse], error)
	// ReceiveRosMessages service is established between rosnode and agent. It
	// gets ros messages which needs to be published such as command velocity
	// messages, camera control messages from agent and then pubslishes to ros.
	ReceiveRosMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RecieveRosMessagesResponse, RecieveRosMessagesRequest], error)
	// Get rtc signal from Rcc server to agent
	GetRtcSignal(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetRtcSignalResponse, GetRtcSignalRequest], error)
	// To transfer the signaling data between RCC server and agent
	SendSignalData(ctx context.Context, in *SignalDataRequest, opts ...grpc.CallOption) (*SignalDataResponse, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) AuthenticateAgent(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Agent_AuthenticateAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetDeviceSpecifications(ctx context.Context, in *SpecsRequest, opts ...grpc.CallOption) (*SpecsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpecsResponse)
	err := c.cc.Invoke(ctx, Agent_GetDeviceSpecifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetAgentConfiguration(ctx context.Context, in *GetAgentConfigurationRequest, opts ...grpc.CallOption) (*GetAgentConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentConfigurationResponse)
	err := c.cc.Invoke(ctx, Agent_GetAgentConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Health(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HealthResponse, HealthRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_Health_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HealthResponse, HealthRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_HealthClient = grpc.BidiStreamingClient[HealthResponse, HealthRequest]

func (c *agentClient) GetCommandRequestStream(ctx context.Context, in *GetCommandRequestStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetCommandRequestStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], Agent_GetCommandRequestStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetCommandRequestStreamRequest, GetCommandRequestStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_GetCommandRequestStreamClient = grpc.ServerStreamingClient[GetCommandRequestStreamResponse]

func (c *agentClient) SendCommandResponse(ctx context.Context, in *SendCommandResponseRequest, opts ...grpc.CallOption) (*SendCommandResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCommandResponseResponse)
	err := c.cc.Invoke(ctx, Agent_SendCommandResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetSubscriptionRequestStream(ctx context.Context, in *GetSubscriptionRequestStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSubscriptionRequestStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[2], Agent_GetSubscriptionRequestStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSubscriptionRequestStreamRequest, GetSubscriptionRequestStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_GetSubscriptionRequestStreamClient = grpc.ServerStreamingClient[GetSubscriptionRequestStreamResponse]

func (c *agentClient) SendSubscriptionResponse(ctx context.Context, in *SendSubscriptionResponseRequest, opts ...grpc.CallOption) (*SendSubscriptionResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSubscriptionResponseResponse)
	err := c.cc.Invoke(ctx, Agent_SendSubscriptionResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SendCommandResponseStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendCommandResponseRequest, SendCommandResponseResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[3], Agent_SendCommandResponseStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendCommandResponseRequest, SendCommandResponseResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_SendCommandResponseStreamClient = grpc.BidiStreamingClient[SendCommandResponseRequest, SendCommandResponseResponse]

func (c *agentClient) PostData(ctx context.Context, in *model.Datapoint, opts ...grpc.CallOption) (*PostDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDataResponse)
	err := c.cc.Invoke(ctx, Agent_PostData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) PostMultiData(ctx context.Context, in *PostMultiDataRequest, opts ...grpc.CallOption) (*PostMultiDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostMultiDataResponse)
	err := c.cc.Invoke(ctx, Agent_PostMultiData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) StreamData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[model.Datapoint, StreamDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[4], Agent_StreamData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[model.Datapoint, StreamDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_StreamDataClient = grpc.ClientStreamingClient[model.Datapoint, StreamDataResponse]

func (c *agentClient) ReceiveRosMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RecieveRosMessagesResponse, RecieveRosMessagesRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[5], Agent_ReceiveRosMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RecieveRosMessagesResponse, RecieveRosMessagesRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_ReceiveRosMessagesClient = grpc.BidiStreamingClient[RecieveRosMessagesResponse, RecieveRosMessagesRequest]

func (c *agentClient) GetRtcSignal(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetRtcSignalResponse, GetRtcSignalRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[6], Agent_GetRtcSignal_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRtcSignalResponse, GetRtcSignalRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_GetRtcSignalClient = grpc.BidiStreamingClient[GetRtcSignalResponse, GetRtcSignalRequest]

func (c *agentClient) SendSignalData(ctx context.Context, in *SignalDataRequest, opts ...grpc.CallOption) (*SignalDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignalDataResponse)
	err := c.cc.Invoke(ctx, Agent_SendSignalData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility.
type AgentServer interface {
	// AuthenticateAgent service authenticates the agent and return a boolean
	// status which determines the authentication status of the agent
	AuthenticateAgent(context.Context, *AuthRequest) (*AuthResponse, error)
	// GetDeviceSpecifications returns the device specification details.
	GetDeviceSpecifications(context.Context, *SpecsRequest) (*SpecsResponse, error)
	// GetAgentConfiguration returns the Agent configuration.
	GetAgentConfiguration(context.Context, *GetAgentConfigurationRequest) (*GetAgentConfigurationResponse, error)
	// Heath service is established between agent and server.When the connection
	// establises the status for the deivce changes
	// to ONLINE. This constantly checks for connection. If the connection is
	// disconnected the device status changes to OFFLINE.
	Health(grpc.BidiStreamingServer[HealthResponse, HealthRequest]) error
	// GetCommandRequestStream service receives command from the server both
	// "SERVICE" and "ACTION" commands. The Command should be configured in the
	// agent's config first. Unconfigured command is not accepted
	GetCommandRequestStream(*GetCommandRequestStreamRequest, grpc.ServerStreamingServer[GetCommandRequestStreamResponse]) error
	// SendCommandResponse service sends command response (Just response if it is
	// service call, if Action call it sends both result and feedback ) for a
	// particular command to the server.
	SendCommandResponse(context.Context, *SendCommandResponseRequest) (*SendCommandResponseResponse, error)
	// GetSubscriptionRequestStream service recieves subscription related commands
	// such as "SUBSCRIBE", "UNSUBSCRIBE", "GET_TOPICS", "GET_SUBSCRIBED_TOPICS" and
	// sends back the response to the server. This is previously implemented for
	// node sdk with grpc, and not work with current implementation.
	GetSubscriptionRequestStream(*GetSubscriptionRequestStreamRequest, grpc.ServerStreamingServer[GetSubscriptionRequestStreamResponse]) error
	// SendSubscriptionResponse sends subscribed topic messages back to Rcc server
	SendSubscriptionResponse(context.Context, *SendSubscriptionResponseRequest) (*SendSubscriptionResponseResponse, error)
	// (DEPRECATED) SendCommandResponseStream sends command response from agent to
	// rcc. It is deprecated using SendCommandResponse service instead.
	SendCommandResponseStream(grpc.BidiStreamingServer[SendCommandResponseRequest, SendCommandResponseResponse]) error
	// PostData service sends single datapoints from agent to rcc. These
	// points include ros messages or system stats which is then sent to influx at
	// the server.
	PostData(context.Context, *model.Datapoint) (*PostDataResponse, error)
	// PostMultiData service sends multiple datapoints from agent to rcc. These
	// points include ros messages or system stats which is then sent to influx at
	// the server.
	PostMultiData(context.Context, *PostMultiDataRequest) (*PostMultiDataResponse, error)
	// StreamData sends telemetry datapoints from rosnode to agent. This is used
	// for receiving telop data such as pose, realsense camera feed etc. from ros
	// node to agent and then agent sends the data to the client using webrtc
	// datachannel
	StreamData(grpc.ClientStreamingServer[model.Datapoint, StreamDataResponse]) error
	// ReceiveRosMessages service is established between rosnode and agent. It
	// gets ros messages which needs to be published such as command velocity
	// messages, camera control messages from agent and then pubslishes to ros.
	ReceiveRosMessages(grpc.BidiStreamingServer[RecieveRosMessagesResponse, RecieveRosMessagesRequest]) error
	// Get rtc signal from Rcc server to agent
	GetRtcSignal(grpc.BidiStreamingServer[GetRtcSignalResponse, GetRtcSignalRequest]) error
	// To transfer the signaling data between RCC server and agent
	SendSignalData(context.Context, *SignalDataRequest) (*SignalDataResponse, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServer struct{}

func (UnimplementedAgentServer) AuthenticateAgent(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateAgent not implemented")
}
func (UnimplementedAgentServer) GetDeviceSpecifications(context.Context, *SpecsRequest) (*SpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceSpecifications not implemented")
}
func (UnimplementedAgentServer) GetAgentConfiguration(context.Context, *GetAgentConfigurationRequest) (*GetAgentConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentConfiguration not implemented")
}
func (UnimplementedAgentServer) Health(grpc.BidiStreamingServer[HealthResponse, HealthRequest]) error {
	return status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedAgentServer) GetCommandRequestStream(*GetCommandRequestStreamRequest, grpc.ServerStreamingServer[GetCommandRequestStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetCommandRequestStream not implemented")
}
func (UnimplementedAgentServer) SendCommandResponse(context.Context, *SendCommandResponseRequest) (*SendCommandResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommandResponse not implemented")
}
func (UnimplementedAgentServer) GetSubscriptionRequestStream(*GetSubscriptionRequestStreamRequest, grpc.ServerStreamingServer[GetSubscriptionRequestStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetSubscriptionRequestStream not implemented")
}
func (UnimplementedAgentServer) SendSubscriptionResponse(context.Context, *SendSubscriptionResponseRequest) (*SendSubscriptionResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSubscriptionResponse not implemented")
}
func (UnimplementedAgentServer) SendCommandResponseStream(grpc.BidiStreamingServer[SendCommandResponseRequest, SendCommandResponseResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendCommandResponseStream not implemented")
}
func (UnimplementedAgentServer) PostData(context.Context, *model.Datapoint) (*PostDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostData not implemented")
}
func (UnimplementedAgentServer) PostMultiData(context.Context, *PostMultiDataRequest) (*PostMultiDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMultiData not implemented")
}
func (UnimplementedAgentServer) StreamData(grpc.ClientStreamingServer[model.Datapoint, StreamDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (UnimplementedAgentServer) ReceiveRosMessages(grpc.BidiStreamingServer[RecieveRosMessagesResponse, RecieveRosMessagesRequest]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveRosMessages not implemented")
}
func (UnimplementedAgentServer) GetRtcSignal(grpc.BidiStreamingServer[GetRtcSignalResponse, GetRtcSignalRequest]) error {
	return status.Errorf(codes.Unimplemented, "method GetRtcSignal not implemented")
}
func (UnimplementedAgentServer) SendSignalData(context.Context, *SignalDataRequest) (*SignalDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignalData not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}
func (UnimplementedAgentServer) testEmbeddedByValue()               {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	// If the following call pancis, it indicates UnimplementedAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_AuthenticateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AuthenticateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_AuthenticateAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AuthenticateAgent(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetDeviceSpecifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetDeviceSpecifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetDeviceSpecifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetDeviceSpecifications(ctx, req.(*SpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetAgentConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetAgentConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetAgentConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetAgentConfiguration(ctx, req.(*GetAgentConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Health_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).Health(&grpc.GenericServerStream[HealthResponse, HealthRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_HealthServer = grpc.BidiStreamingServer[HealthResponse, HealthRequest]

func _Agent_GetCommandRequestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCommandRequestStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetCommandRequestStream(m, &grpc.GenericServerStream[GetCommandRequestStreamRequest, GetCommandRequestStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_GetCommandRequestStreamServer = grpc.ServerStreamingServer[GetCommandRequestStreamResponse]

func _Agent_SendCommandResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommandResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SendCommandResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_SendCommandResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SendCommandResponse(ctx, req.(*SendCommandResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetSubscriptionRequestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSubscriptionRequestStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetSubscriptionRequestStream(m, &grpc.GenericServerStream[GetSubscriptionRequestStreamRequest, GetSubscriptionRequestStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_GetSubscriptionRequestStreamServer = grpc.ServerStreamingServer[GetSubscriptionRequestStreamResponse]

func _Agent_SendSubscriptionResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSubscriptionResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SendSubscriptionResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_SendSubscriptionResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SendSubscriptionResponse(ctx, req.(*SendSubscriptionResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SendCommandResponseStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).SendCommandResponseStream(&grpc.GenericServerStream[SendCommandResponseRequest, SendCommandResponseResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_SendCommandResponseStreamServer = grpc.BidiStreamingServer[SendCommandResponseRequest, SendCommandResponseResponse]

func _Agent_PostData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Datapoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).PostData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_PostData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).PostData(ctx, req.(*model.Datapoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_PostMultiData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMultiDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).PostMultiData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_PostMultiData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).PostMultiData(ctx, req.(*PostMultiDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).StreamData(&grpc.GenericServerStream[model.Datapoint, StreamDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_StreamDataServer = grpc.ClientStreamingServer[model.Datapoint, StreamDataResponse]

func _Agent_ReceiveRosMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).ReceiveRosMessages(&grpc.GenericServerStream[RecieveRosMessagesResponse, RecieveRosMessagesRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_ReceiveRosMessagesServer = grpc.BidiStreamingServer[RecieveRosMessagesResponse, RecieveRosMessagesRequest]

func _Agent_GetRtcSignal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).GetRtcSignal(&grpc.GenericServerStream[GetRtcSignalResponse, GetRtcSignalRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_GetRtcSignalServer = grpc.BidiStreamingServer[GetRtcSignalResponse, GetRtcSignalRequest]

func _Agent_SendSignalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SendSignalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_SendSignalData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SendSignalData(ctx, req.(*SignalDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.rcc.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateAgent",
			Handler:    _Agent_AuthenticateAgent_Handler,
		},
		{
			MethodName: "GetDeviceSpecifications",
			Handler:    _Agent_GetDeviceSpecifications_Handler,
		},
		{
			MethodName: "GetAgentConfiguration",
			Handler:    _Agent_GetAgentConfiguration_Handler,
		},
		{
			MethodName: "SendCommandResponse",
			Handler:    _Agent_SendCommandResponse_Handler,
		},
		{
			MethodName: "SendSubscriptionResponse",
			Handler:    _Agent_SendSubscriptionResponse_Handler,
		},
		{
			MethodName: "PostData",
			Handler:    _Agent_PostData_Handler,
		},
		{
			MethodName: "PostMultiData",
			Handler:    _Agent_PostMultiData_Handler,
		},
		{
			MethodName: "SendSignalData",
			Handler:    _Agent_SendSignalData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Health",
			Handler:       _Agent_Health_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCommandRequestStream",
			Handler:       _Agent_GetCommandRequestStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSubscriptionRequestStream",
			Handler:       _Agent_GetSubscriptionRequestStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendCommandResponseStream",
			Handler:       _Agent_SendCommandResponseStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamData",
			Handler:       _Agent_StreamData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveRosMessages",
			Handler:       _Agent_ReceiveRosMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRtcSignal",
			Handler:       _Agent_GetRtcSignal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/rcc/v1/rcc.proto",
}
