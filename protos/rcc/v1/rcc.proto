syntax = "proto3";

package v1.rcc;

import "protos/model/v1/config.proto";
import "protos/model/v1/commands.proto";
import "protos/model/v1/datapoint.proto";
import "protos/model/v1/webrtc.proto";
import "protos/model/v1/specifications.proto";



option go_package = "protos/v1/rcc";

/*
NOTE:
1. Every sequenctial request sent by the server has a request_id parameter in
the request. This is an UUID sent with the message. The response for the request
should return the same UUID as request_id only then it gets the resposne for the
request on the client side.
*/

service Agent {

  /* AuthenticateAgent service authenticates the agent and return a boolean
    status which determines the authentication status of the agent */
  rpc AuthenticateAgent(AuthRequest) returns (AuthResponse) {}

  /* GetDeviceSpecifications returns the device specification details. */
  rpc GetDeviceSpecifications(SpecsRequest) returns (SpecsResponse) {}

  /* GetAgentConfiguration returns the Agent configuration. */
  rpc GetAgentConfiguration(GetAgentConfigurationRequest)
      returns (GetAgentConfigurationResponse) {}

  /* Heath service is established between agent and server.When the connection
  establises the status for the deivce changes
  to ONLINE. This constantly checks for connection. If the connection is
  disconnected the device status changes to OFFLINE. */
  rpc Health(stream HealthResponse) returns (stream HealthRequest) {}

  /* GetCommandRequestStream service receives command from the server both
  "SERVICE" and "ACTION" commands. The Command should be configured in the
  agent's config first. Unconfigured command is not accepted */
  rpc GetCommandRequestStream(GetCommandRequestStreamRequest)
      returns (stream GetCommandRequestStreamResponse) {}

  /* SendCommandResponse service sends command response (Just response if it is
  service call, if Action call it sends both result and feedback ) for a
  particular command to the server. */
  rpc SendCommandResponse(SendCommandResponseRequest)
      returns (SendCommandResponseResponse) {}

  /* GetSubscriptionRequestStream service recieves subscription related commands
   such as "SUBSCRIBE", "UNSUBSCRIBE", "GET_TOPICS", "GET_SUBSCRIBED_TOPICS" and
   sends back the response to the server. This is previously implemented for
   node sdk with grpc, and not work with current implementation.*/
  rpc GetSubscriptionRequestStream(GetSubscriptionRequestStreamRequest)
      returns (stream GetSubscriptionRequestStreamResponse) {}

  /* SendSubscriptionResponse sends subscribed topic messages back to Rcc server
   */
  rpc SendSubscriptionResponse(SendSubscriptionResponseRequest)
      returns (SendSubscriptionResponseResponse) {}

  /* (DEPRECATED) SendCommandResponseStream sends command response from agent to
   * rcc. It is deprecated using SendCommandResponse service instead.*/
  rpc SendCommandResponseStream(stream SendCommandResponseRequest)
      returns (stream SendCommandResponseResponse) {}

  /* PostData service sends single datapoints from agent to rcc. These
points include ros messages or system stats which is then sent to influx at
the server. */
  rpc PostData(model.Datapoint) returns (PostDataResponse) {}

  /* PostMultiData service sends multiple datapoints from agent to rcc. These
  points include ros messages or system stats which is then sent to influx at
  the server. */
  rpc PostMultiData(PostMultiDataRequest) returns (PostMultiDataResponse) {}

  /* StreamData sends telemetry datapoints from rosnode to agent. This is used
  for receiving telop data such as pose, realsense camera feed etc. from ros
  node to agent and then agent sends the data to the client using webrtc
  datachannel  */
  rpc StreamData(stream model.Datapoint) returns (StreamDataResponse) {}

  /* ReceiveRosMessages service is established between rosnode and agent. It
  gets ros messages which needs to be published such as command velocity
  messages, camera control messages from agent and then pubslishes to ros. */
  rpc ReceiveRosMessages(stream RecieveRosMessagesResponse)
      returns (stream RecieveRosMessagesRequest) {}

  /* Get rtc signal from Rcc server to agent */
  rpc GetRtcSignal(stream GetRtcSignalResponse)
      returns (stream GetRtcSignalRequest) {}
      
  /*To transfer the signaling data between RCC server and agent*/
  rpc SendSignalData(SignalDataRequest) returns (SignalDataResponse) {}
}

message AuthRequest {
  string token = 1; // Provisional token of the device
  string machine_id = 2;
  string agent_version = 3;
  string ros_version = 4;
}

message AuthResponse {
  bool status = 1;
  string device_id = 2;
}

message SpecsRequest {
  model.DeviceSpecifications specifications = 1;
  string device_id = 2;
}

message SpecsResponse {
  bool status = 1; 
}

message GetAgentConfigurationRequest {}

message GetAgentConfigurationResponse {
  model.AgentConfigurationStore configuration = 1;
}

message HealthRequest { string id = 1; }

message HealthResponse {
  string request_id = 1; // UUID for the request
}

message SendCommandResponseRequest { model.CommandResponse response = 1; }

message Error {
  string message = 1;
  string code = 2;
}

message SendCommandResponseResponse {
  bool status = 1;
  Error error = 2;
}

message GetCommandRequestStreamRequest {}

message GetCommandRequestStreamResponse { 
  model.CommandRequest request = 1;
  string action = 2;
}

message PostDataResponse { bool status = 1; }

message PostMultiDataRequest { repeated model.Datapoint data = 1; }

message PostMultiDataResponse { bool status = 1; }

message StreamDataResponse {}

message GetSubscriptionRequestStreamRequest {}

message GetSubscriptionRequestStreamResponse {
  string id = 1;
  model.StreamConfiguration topic = 2;
  string action = 3;
}

message SendSubscriptionResponseRequest {
  model.SubscriptionsResponse response = 1;
}

message SendSubscriptionResponseResponse {
  bool status = 1;
  Error error = 2;
}

message RecieveRosMessagesRequest {
  string id = 1;
  model.ControlDatapoint control_datapoint = 2;
}

message RecieveRosMessagesResponse {
  string request_id = 1; // UUID for the request
  bool status = 2;
  string error = 3;
}

// Webrtc
message GetRtcSignalRequest {
  string offer = 1;
  string id = 2;
  string query = 3;
  string ice_candidate=4;
  string token=5;
  model.Webrtctype request_type = 6;

}

message GetRtcSignalResponse {
  string answer = 1;
  string id = 2;
  string ice_candidate=3;
  string error = 4;
}

message SignalDataRequest {
  model.Webrtctype request_type = 1;
  string id=2;
  string value=3;
}

message SignalDataResponse {
  string id = 1;
  bool status = 2;
  string error = 3;
}