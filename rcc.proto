    syntax = "proto3";

    package rccProto;
    option go_package = "./proto";




    message Response {
        bool status = 1;
        string message = 2;
    }

    message Battery {
        int32 percentage = 1;
        bool charging = 2;
    }

    message Message {
        string device_id = 1;
        string request_id = 2;
        string key = 3;
        string topic = 4;
        string action = 5;
         bytes payload = 6;    
    }

    message DeviceUsageInfo {
        string device_id = 1;
        uint64 memory_total = 2;
        uint64 memory_free = 3;
        float memory_used = 4;
        float cpu_used = 5;
    }
    message Empty {

    }


message PingServerRequest {
    bool status = 1;
}

message PingServerResponse {
    bool status = 1;
};

message BatteryStatusServiceRequest{
    string status = 1;
    double current_capacity = 2;
    double design_capacity = 3;
    double charge_rate = 4;
    double voltage  = 5;
}
message BatteryStatusServiceResponse {
    
}

message CreateDeviceRequest {
    string name = 1;
    string description = 2;
    string type = 3;
    string location = 4;
}

message CreateDeviceResponse{ 
   string name = 1;
    string description = 2;
    string type = 3;
    string location = 4;
    string provisional_token = 5;
}

message AgentConfigRequest {
    string provisional_token = 1;
    
}


message AgentConfigResponse {
    bytes config = 1;
 }

// message AgentConfigResponse {
//    string provisional_token = 1;
//    string id = 2;
//    repeated Topic initial_subscriptions = 3;
// }

message ValidateTokenRequest {
    string provisional_token = 1;
}

message ValidateTokenResponse {
    bool valid = 1;
}

message Topic {
    string topic = 1;
    int32 delay = 2;
}

message GetRosTopicToSubscribeResponse {
    repeated Topic topics = 1;
}

message UpdateDeviceStateRequest {
    int32 device_state = 1;
    int32 application_state = 2;
}

message UpdateDeviceStateResponse {
    bool status = 1;
    string message = 2;
}

message UpdateDeviceStatusRequest {
    DeviceStatus status = 1;
}

message UpdateDeviceStatusResponse {
    bool status = 1;
    string message = 2;
}

enum DeviceStatus {
    ONLINE = 0;
    OFFLINE = 1;
}

message ListDevicesResponse {
    bytes devices = 1;
}

message GetDeviceReponse {
    bytes data = 1;
}

message UploadRequest {
    oneof data {
        FileInfo info = 1;
    }
    bytes Content = 2;
    
}

message FileInfo {
    string name = 1;
        int32 version_code = 2;
        string change_log = 3;
        string version_name = 4;
        string path = 5;
  }

message UploadResponse {
    string message = 1;
    bool status = 2;
}

message DeviceRuntime {
    int32 runtime = 1;
}

message RosTopic {
    string topic = 1;
    string message_type = 2;
}

message RosTopicRequest {}

message RosTopicResponse {
    repeated RosTopic ros_topics = 1;
}




    service RosAgentService{
        /*Get available published topics from ros*/
        rpc GetRosTopics (RosTopicRequest) returns (RosTopicResponse);
        /*Sends battery status from ROS to Agent, Agent to RCC and the data is stored in RCC*/
        rpc SendBatteryStatus(Battery) returns (Response);
        /*This is the primary dynamic message stream which sends data from ROS to RCC or vice versa at any point of time*/
        rpc Stream(stream Message) returns (stream Message) {}

        rpc TelemetryStream(stream Message) returns (stream Message) {}


        /*Sends devcie usage info like cpu and memory usage from Agent to RCC */
        rpc SendDeviceUsageInfo(stream DeviceUsageInfo) returns (Empty) {}
        /*Sends the current status of the device*/
        // rpc SendDeviceStatus(DeviceStatus) returns (Response);

        rpc UpdateDeviceState(UpdateDeviceStateRequest) returns (UpdateDeviceStateResponse);

        rpc UpdateDeviceStatus(UpdateDeviceStatusRequest) returns (UpdateDeviceStatusResponse);

        rpc SendDeviceRuntime(DeviceRuntime) returns (Response);
        /*Upload agent binary files to rcc*/
        rpc UploadBinary(stream UploadRequest) returns (UploadResponse) {}
        /*Sends list of devices to Fleet Management System*/
        rpc ListDevices(Empty) returns (ListDevicesResponse) {}
        /*Sends single device detail to Fleet Management System*/
        rpc GetDevice(Empty)returns (GetDeviceReponse){}
        /*Used to create a new device which returns a provisional token to validate*/
        rpc CreateDeviceService (CreateDeviceRequest) returns (CreateDeviceResponse) {}
        /*Sends the config to Agent from RCC*/
        rpc AgentConfigService (AgentConfigRequest) returns (AgentConfigResponse) {}
        /*Validates the provisional token of the Agent and returns a status boolean*/
        rpc ValdiateTokenService (ValidateTokenRequest) returns (ValidateTokenResponse) {}
        /*Gets the list of topics from Agent to subscribe initially*/
        rpc GetRosTopicToSubscribe (Empty) returns (GetRosTopicToSubscribeResponse) {}        
    }